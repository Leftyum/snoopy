local uis = game:GetService("UserInputService")
local player = game.Players.LocalPlayer
local running = false

-- Only run on mobile
if not uis.TouchEnabled then return end

-- Setup GUI (assumes your GUI already exists)
local screenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
screenGui.Name = "MobileClickerGUI"
screenGui.ResetOnSpawn = false

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 150, 0, 50)
toggleButton.Position = UDim2.new(0, 20, 0, 20)
toggleButton.Text = "Auto Clicker OFF"
toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
toggleButton.Parent = screenGui

-- Auto click touch logic
local isTouching = false

local function simulateClick()
	while running and isTouching do
		-- Fire a simulated touch tap
		local inputPosition = uis:GetMouseLocation()
		local touchInput = Instance.new("BindableEvent")
		touchInput:Fire()
		touchInput:Destroy()

		-- Fire touch tap using VirtualInputManager (only works in supported executors)
		local success, virtualInput = pcall(function()
			return game:GetService("VirtualInputManager")
		end)

		if success then
			virtualInput:SendTouchEvent(Enum.UserInputType.Touch, {inputPosition.X, inputPosition.Y}, Enum.UserInputState.Begin, false)
			virtualInput:SendTouchEvent(Enum.UserInputType.Touch, {inputPosition.X, inputPosition.Y}, Enum.UserInputState.End, false)
		end

		task.wait(1 / 12) -- 12 CPS (customize this)
	end
end

toggleButton.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch then
		running = not running
		toggleButton.Text = running and "Auto Clicker ON" or "Auto Clicker OFF"
		toggleButton.BackgroundColor3 = running and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
	end
end)

uis.TouchStarted:Connect(function()
	if running then
		isTouching = true
		task.spawn(simulateClick)
	end
end)

uis.TouchEnded:Connect(function()
	isTouching = false
end)
